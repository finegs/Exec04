/*
 * AsyncLogger.hpp
 *
 *  Created on: 2017. 12. 8.
 *      Author: finegs
 */

#ifndef ASYNCLOGGER_HPP_
#define ASYNCLOGGER_HPP_

#include <string>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <sys/time.h>
#include <time.h>
#include <thread>
#include <mutex>
//#include <bits/std_mutex.h>
#include <unistd.h>
#include <chrono>
#include <mutex>
#include <string>
#include <condition_variable>

#include <queue>
#include <exception>

namespace asynclogger {

using Clock = std::chrono::high_resolution_clock;
using TimePoint = std::chrono::time_point<Clock>;

static std::string MSG_INF("[I]");
static std::string MSG_DBG("[D]");
static std::string MSG_ERR("[E]");
static std::string MSG_FATAL("[F]");

enum AsyncLogLevel {
	DEBUG = 0,
	INFO = 1,
	ERROR = 2,
	FATAL = 3
};

#define AsyncLogLevel_To_Str(Enum) std::string(#Enum).c_str()

class AsyncLogMsg {
public:
	AsyncLogMsg(const char* msg);
	AsyncLogMsg(const AsyncLogLevel& level, const char* msg);
	~AsyncLogMsg();
	char* getMsg() const {
		return msg;
	}
	TimePoint getTimePoint() const {
		return np;
	}

	AsyncLogLevel getLevel() const {
		return level;
	}

private:
	TimePoint np;
	char* msg;
	AsyncLogLevel level;

};


class AsyncLogger {
public:
	AsyncLogger();
	~AsyncLogger();

	void push(const std::string& str);
	const char* getTS();
	void getTS(const TimePoint& tp, char* ts);
	AsyncLogLevel getLevel() const {
		return this->level;
	}
	void setLevel(const AsyncLogLevel& level) {
		this->level = level;
	}

	void start();
	void pause();
	void resume();
	void stop();
	void logDebug(const char* msg);
	int getQueueSize() const {
		return msgQueue.size();
	}

	void join();

private:
//	std::priority_queue<asynclogger::AsyncLoggerMessage*> que;
	std::queue<asynclogger::AsyncLogMsg*> msgQueue;
	std::mutex mtx;
	std::condition_variable cv;
	std::chrono::milliseconds sleepInterValMills;
	bool isStart;
	bool isPause;
	std::thread* logWriter;
	char* ts;
	std::ostream out;
	std::mutex outMtx;
	AsyncLogLevel level;

	void subTask();
	void syncDebugLog(const char* msg);
	void handleLog(const asynclogger::AsyncLogMsg* msg);
	void handleLog(const char* msg, const TimePoint& np);
	void handleLog(const asynclogger::AsyncLogLevel& level, const char* msg, const TimePoint& tp);
	void handleSyncLog(const asynclogger::AsyncLogLevel& level, const char* msg);
};

}

#endif /* ASYNCLOGGER_HPP_ */
