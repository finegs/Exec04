//============================================================================
// Name        : exec03.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#if 0

#include <bitset>
#include <iostream>
#include <algorithm>
#include <map>

using namespace std;

template <class K,class V>
class value_equals {
private:
	V value;
public:
	value_equals(const V& v) : value(v) {
	}

	bool operator() (pair<const K, V> elem) {
		return elem.second == value;
	}
};

int main() {
//	string str;
//
////	setvbuf(stdout, NULL, _IONBF, 0);
////	setvbuf(stderr, NULL, _IONBF, 0);
//
//	cout << "!!!Hello World!!!" << endl; // prints !!!Hello World!!!
//	cout << "Enter string" << endl;
//	fflush(stdout);
////	cin >> str;
//	getline(cin, str);
//	cout << "Entered string is "<< str << endl;



#if 0
	bitset<10> bitsets(2);

	bitsets.set(3);
	bitsets.set(6);

	bitsets[8] = true;
	bitsets[7] = true;
	bitsets[9] = bitsets[3];

	if(bitsets.test(3))
		cout << "bit 3 is set!\n" << endl;
	cout <<bitsets << endl;
#endif

	typedef map<float, float> FloatFloatMap;
	FloatFloatMap coll;
	FloatFloatMap::iterator pos;

	coll[1] = 7;
	coll[2] = 4;
	coll[3] = 2;
	coll[4] = 3;
	coll[5] = 6;
	coll[6] = 1;
	coll[7] = 3;

	pos= find_if(coll.begin(), coll.end(), value_equals<float, float>(3.0));
	if(pos!= coll.end()) {
		cout << pos->first << ": "
				<< pos->second << endl;
	}

	return 0;
}

#endif


//#define _USE_32BIT_TIME_T


#include <iostream>
#include <string>
#include <sstream>
#include <cstdio>
#include <vector>
#include <sys/time.h>
#include <time.h>
#include <thread>
#include <mutex>
//#include <bits/std_mutex.h>
#include <unistd.h>
#include <chrono>
#include <condition_variable>

#include <AsyncLogger.hpp>

using namespace std;
using namespace chrono;
using namespace chrono_literals;

using namespace asynclogger;

static AsyncLogger logger;



char TS[25];

mutex mainCmdMTX;
condition_variable mainCmdCV;
bool ready = false;
bool isRun = true;
bool isPaused = false;
//auto  sleepInterval = 3000ms;
milliseconds sleepInterval(3000);

void getTS(char* str)
{

//	timeval curTime;
//	gettimeofday(&curTime, NULL);
//	int milli = curTime.tv_usec / 1000;
//
//	char bf[20];
//	struct tm* tt = localtime(&curTime.tv_sec)
//	// localtime is not thread safe
//	strftime(bf, 20, "%Y:%m:%d %H:%M:%S", tt);
//
//	sprintf(str, "%s.%03d", bf, milli);

#if 0
	std::time_t t;
	struct tm *lt;
	struct timeval tv;

	if((t=gettimeofday(&tv, NULL)) == -1) {
		perror("gettimeofday () call error : " + t);
		return;
	}

	if((lt = localtime(&tv.tv_sec)) == NULL) {
		perror("localtime() call error : ");
		return;
	}

	sprintf(str, "%04d-%02d-%02d %02d:%02d:%02d.%06d",
			lt->tm_year + 1900
			, lt->tm_mon + 1
			, lt->tm_mday
			, lt->tm_hour
			, lt->tm_min
			, lt->tm_sec
			, (int)tv.tv_usec);

#endif

//	std::chrono::system_clock::time_point tp = std::chrono::system_clock::now();
//	std::time_t time = std::chrono::system_clock::to_time_t(tp);
//	std::tm timetm = *std::localtime(&time);
//	std::cout << "output : " << std::put_time(&timetm, "%c %Z") << "+"
//	          << std::chrono::duration_cast<std::chrono::milliseconds>(tp.time_since_epoch()).count() % 1000 << std::endl;

//	std::chrono::system_clock::time_point tp = std::chrono::system_clock::now();
//	std::time_t time = std::chrono::system_clock::to_time_t(tp);
//	std::tm timetm = *std::localtime(&time);
//	std::cout << "output : " << std::put_time(&timetm, "%c %Z") << "+"
//	          << std::chrono::duration_cast<std::chrono::milliseconds>(tp.time_since_epoch()).count() % 1000 << std::endl;

//	  time_t timer;                // Define the timer
//	  struct tm *tblock;           // Define a structure for time block
//
//	  // Get time of day
//	  timer = time(NULL);
//
//	  // Converts date/time to a structure
//	  tblock = localtime(&timer);
//
//	  // Output ASCII data/time
//	  char sf[25];
//	  strftime(sf, 25, "%Y%m%D %H%m%S", tblock);
////	  printf("Local time is: %s", asctime(tblock));
//	  printf("Local time is: %s", sf);

//	system_clock::time_point now = system_clock::now();
//	char sf[30];
//
//	time_t tt;
//
//	tt = system_clock::to_time_t(now);
//	auto tse = now.time_since_epoch();
//	auto now_ms = duration_cast<milliseconds>(tse);
//	auto now_s = duration_cast<seconds>(tse);
//	auto jst_ms = now_ms - now_s;
//    strftime(sf, sizeof(sf), "%Y-%m-%d %H:%M:%S", localtime(&tt));
//	sprintf(sf, "%s.%03lld", sf, jst_ms.count());

    using namespace std;
    using namespace std::chrono;

    auto now = system_clock::now();

    time_t curr_time = system_clock::to_time_t(now);
    strftime(TS, 25,"%Y-%m-%d %H:%M:%S",localtime(&curr_time));

    system_clock::duration since_epoch = now.time_since_epoch();
    seconds s = duration_cast<seconds>(since_epoch);
    since_epoch -= s;
    milliseconds milli = duration_cast<milliseconds>(since_epoch);

    sprintf(str, "%s.%03lld", TS, milli.count());
}

void log(const string msg)
{
	log(msg.c_str());
}
void log(const char* msg)
{

	logger.push(std::string(std::move(msg)));

//	char ts[24];
//	getTS(ts);
//	mainCmdMTX.lock();
////	printf("%s : %s\n", ts, msg);
//	cout << ts << " : " << msg << endl;
//	mainCmdMTX.unlock();
}

using namespace std;
vector<int> getPi(string p) {
	int m = (int)p.size(),j=0;
	vector<int> pi(m, 0);
	for(int i= 1;i<m;i++) {
		while(j>0&&p[i] != p[j])
			j = pi[j-1];
		if(p[i] == p[j])
			pi[i] = ++j;
	}
	return pi;
}

vector<int> kmp(string s, string p) {
	vector<int> ans;
	auto pi = getPi(p);
	int n = (int)s.size(), m = (int)p.size(), j = 0;
	for(int i = 0;i<n;i++) {
		while(j>0&&s[i] !=p[j])
			j = pi[j-1];
		if(s[i]==p[j]) {
			if(j==m-1) {
				ans.push_back(i-m+1);
				j = pi[j];
			}
			else {
				j++;
			}
		}
	}

	return ans;
}



void subTask(string s, string p)
{
	char msg[100];
	unique_lock<mutex> lck(mainCmdMTX);
	for (int i = 0; i < 10000 && isRun; ++i) {

		if(!isPaused) {
			sprintf(msg, "%5d : start", i);
			log(msg);

			auto matched = kmp(s, p);
			sprintf(msg, "%5d : %010d", i, (int)matched.size());
			log(msg);
			for(auto ii: matched) {
				sprintf(msg, "%5d : %d", i, ii);
				log(msg);
			}

			sprintf(msg, "%5d : end", i);
			log(msg);
		}
		else {
			sprintf(msg, "%5d : paused", i);
			log(msg);
		}

		mainCmdCV.wait_for(lck, sleepInterval);
	}
}

int main() {
	using namespace asynclogger;
	using namespace this_thread;

	string s, p, cmd, buf;
	vector<string> cmds;
	getline(cin, s);
	getline(cin, p);

	logger.start();

	thread t1(subTask, s, p);

	log("thread 1 is create and started");

//	this_thread::sleep_for(120ms);
	while(isRun) {
		cmds.clear();

		getline(cin, cmd);
		stringstream ss(cmd);

		while(ss>>buf) cmds.push_back(buf);

		if(!cmd.empty() && (cmds.size()<1|| (cmd = cmds.at(0)).size() < 1)) {
			log("Empty Command : ");
			continue;
		}

		if("stop" == cmd) {
			log("Notifying stop..");
			isRun = false;
			mainCmdCV.notify_all();
		}
		else if ("start" == cmd){
			log("Notifying start..");
			isPaused = false;
			isRun = true;
			mainCmdCV.notify_all();
		}
		else if("pause" == cmd) {
			log("Notifying pause");
			isRun = true;
			isPaused = true;
			mainCmdCV.notify_all();
		}
		else if("resume" == cmd) {
			log("Notifying resume");
			isPaused = false;
			mainCmdCV.notify_all();
		}
		else if ("set" == cmd) {
			if(cmds.size() > 2) {
				if(stricmp("si",  cmds.at(1).c_str())==0) {
					int newSi = atoi(cmds.at(2).c_str());

					milliseconds newSleepInt(newSi);

					if(sleepInterval != newSleepInt) {
						char lm[200];
						sprintf(lm, "sleepInterval changed : %lld -> %lld", sleepInterval.count(), newSleepInt.count());
						log(lm);

						sleepInterval = newSleepInt;
					}
				}
				else {
					char lm[200];
					sprintf(lm, "unsupported parameter: %s", cmds.at(1).c_str());
					log(lm);
				}
			}
			else {
				char lm[200];
				sprintf(lm, "unsupported argument count : %lld", cmds.size());
				log(lm);
			}
			mainCmdCV.notify_all();
		}
		else {
//			log("Notifying nothing.. : cm = " + cmd);
			log("Notifying nothing.. : ");
		}
	}

	t1.join();


	return 0;
}
